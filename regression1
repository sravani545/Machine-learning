{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "X2Ri9AHk_UsH"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import sklearn as sk\n",
        "import matplotlib.pyplot as mlp\n",
        "import seaborn as sb"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import io\n",
        "from google.colab import files\n",
        "upload=files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "lbF00jRd_owC",
        "outputId": "9557f8a8-4cdb-467f-e4ea-16a4b0c2fe1f"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-0aad1bcb-3e7b-4c81-bfaa-9b1fc6d01d32\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-0aad1bcb-3e7b-4c81-bfaa-9b1fc6d01d32\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Salary_Data.csv to Salary_Data.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset=pd.read_csv(\"Salary_Data.csv\")"
      ],
      "metadata": {
        "id": "Qm4_OTN_AJiJ"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 990
        },
        "id": "nrr2ScN7Ad3m",
        "outputId": "b1921956-a0a6-4a1d-8588-8c512dee56a5"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    YearsExperience  Salary\n",
              "0               1.1   39343\n",
              "1               1.3   46205\n",
              "2               1.5   37731\n",
              "3               2.0   43525\n",
              "4               2.2   39891\n",
              "5               2.9   56642\n",
              "6               3.0   60150\n",
              "7               3.2   54445\n",
              "8               3.2   64445\n",
              "9               3.7   57189\n",
              "10              3.9   63218\n",
              "11              4.0   55794\n",
              "12              4.0   56957\n",
              "13              4.1   57081\n",
              "14              4.5   61111\n",
              "15              4.9   67938\n",
              "16              5.1   66029\n",
              "17              5.3   83088\n",
              "18              5.9   81363\n",
              "19              6.0   93940\n",
              "20              6.8   91738\n",
              "21              7.1   98273\n",
              "22              7.9  101302\n",
              "23              8.2  113812\n",
              "24              8.7  109431\n",
              "25              9.0  105582\n",
              "26              9.5  116969\n",
              "27              9.6  112635\n",
              "28             10.3  122391\n",
              "29             10.5  121872"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f0129a33-d7d6-40a0-ade9-b52363b9074a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>YearsExperience</th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.1</td>\n",
              "      <td>39343</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.3</td>\n",
              "      <td>46205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.5</td>\n",
              "      <td>37731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.0</td>\n",
              "      <td>43525</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.2</td>\n",
              "      <td>39891</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2.9</td>\n",
              "      <td>56642</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>3.0</td>\n",
              "      <td>60150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>3.2</td>\n",
              "      <td>54445</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>3.2</td>\n",
              "      <td>64445</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>3.7</td>\n",
              "      <td>57189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>3.9</td>\n",
              "      <td>63218</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>4.0</td>\n",
              "      <td>55794</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>4.0</td>\n",
              "      <td>56957</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>4.1</td>\n",
              "      <td>57081</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>4.5</td>\n",
              "      <td>61111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>4.9</td>\n",
              "      <td>67938</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>5.1</td>\n",
              "      <td>66029</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>5.3</td>\n",
              "      <td>83088</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>5.9</td>\n",
              "      <td>81363</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>6.0</td>\n",
              "      <td>93940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>6.8</td>\n",
              "      <td>91738</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>7.1</td>\n",
              "      <td>98273</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>7.9</td>\n",
              "      <td>101302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>8.2</td>\n",
              "      <td>113812</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>8.7</td>\n",
              "      <td>109431</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>9.0</td>\n",
              "      <td>105582</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>9.5</td>\n",
              "      <td>116969</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>9.6</td>\n",
              "      <td>112635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>10.3</td>\n",
              "      <td>122391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>10.5</td>\n",
              "      <td>121872</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0129a33-d7d6-40a0-ade9-b52363b9074a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f0129a33-d7d6-40a0-ade9-b52363b9074a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f0129a33-d7d6-40a0-ade9-b52363b9074a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "wcM1Y0KfAml4",
        "outputId": "a4cbe7b7-6d11-408a-eb59-a65ebc836b3b"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   YearsExperience  Salary\n",
              "0              1.1   39343\n",
              "1              1.3   46205\n",
              "2              1.5   37731\n",
              "3              2.0   43525\n",
              "4              2.2   39891"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-89d9f9de-4ee6-4dc4-9335-fabe9aac6ce0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>YearsExperience</th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.1</td>\n",
              "      <td>39343</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.3</td>\n",
              "      <td>46205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.5</td>\n",
              "      <td>37731</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.0</td>\n",
              "      <td>43525</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.2</td>\n",
              "      <td>39891</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89d9f9de-4ee6-4dc4-9335-fabe9aac6ce0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-89d9f9de-4ee6-4dc4-9335-fabe9aac6ce0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-89d9f9de-4ee6-4dc4-9335-fabe9aac6ce0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x=dataset.iloc[:,:-1].values\n",
        "y=dataset.iloc[:,1].values"
      ],
      "metadata": {
        "id": "qB9mzbPOCpKU"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,Y_test = train_test_split(x,y,test_size=0.2,random_state=0)"
      ],
      "metadata": {
        "id": "lZfMjL2_B9yo"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "regressor=LinearRegression()\n",
        "regressor.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QVCpbxMNA-dR",
        "outputId": "51cf0c6d-0f22-44b8-8846-eb638259ab34"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = regressor.predict(x_test)\n",
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TYb37EHPE4My",
        "outputId": "e6e81a20-dd6e-45c4-b173-9715e69cb3cf"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 40748.96184072, 122699.62295594,  64961.65717022,  63099.14214487,\n",
              "       115249.56285456, 107799.50275317])"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mlp.scatter(x_train,y_train,color=\"green\")\n",
        "mlp.plot(x_train,regressor.predict(x_train),color=\"blue\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "e0QohaWIPUsP",
        "outputId": "a8005935-e9bb-4adb-da80-83444e0c1590"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f09c528b850>]"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mlp.title(\"salary vs experience(training set)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "f6Aiyh16QZPH",
        "outputId": "5c3652ee-3817-4bb4-e523-89b8fb6055c5"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'salary vs experience(training set)')"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}
